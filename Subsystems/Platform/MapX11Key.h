
#define X11_MISCELLANY
#include <X11/keysymdef.h>

#include "Input.h"

#define MAP_KEY(X, Y) case X: return Y; break
#define MAP_KEY2(X, Y, Z) case X: case Y: return Z; break

// this function maps X11 key to Nutmeg virtual key
// autogenerated, do not edit
inline int MapX11Key(KeySym key)
{
	using namespace Nutmeg;

	switch (key)
	{
		MAP_KEY (XK_Escape,     KEY_ESCAPE);
		MAP_KEY (XK_1,          KEY_1);
		MAP_KEY (XK_2,          KEY_2);
		MAP_KEY (XK_3,          KEY_3);
		MAP_KEY (XK_4,          KEY_4);
		MAP_KEY (XK_5,          KEY_5);
		MAP_KEY (XK_6,          KEY_6);
		MAP_KEY (XK_7,          KEY_7);
		MAP_KEY (XK_8,          KEY_8);
		MAP_KEY (XK_9,          KEY_9);
		MAP_KEY (XK_0,          KEY_0);
		MAP_KEY (XK_minus,      KEY_MINUS);
		MAP_KEY (XK_plus,       KEY_PLUS);
		MAP_KEY (XK_BackSpace,  KEY_BACKSPACE);
		MAP_KEY (XK_Tab,        KEY_TAB);
		MAP_KEY2(XK_Q, XK_q,    KEY_Q);
		MAP_KEY2(XK_W, XK_w,    KEY_W);
		MAP_KEY2(XK_E, XK_e,    KEY_E);
		MAP_KEY2(XK_R, XK_r,    KEY_R);
		MAP_KEY2(XK_T, XK_t,    KEY_T);
		MAP_KEY2(XK_Y, XK_y,    KEY_Y);
		MAP_KEY2(XK_U, XK_u,    KEY_U);
		MAP_KEY2(XK_I, XK_i,    KEY_I);
		MAP_KEY2(XK_O, XK_o,    KEY_O);
		MAP_KEY2(XK_P, XK_p,    KEY_P);
		MAP_KEY (XK_parenleft,  KEY_LBRACKET); /// XXX: check this
		MAP_KEY (XK_parenright, KEY_RBRACKET); /// XXX: check this
		MAP_KEY (XK_Return,     KEY_ENTER);
		MAP_KEY2(XK_Control_L, XK_Control_R, KEY_CONTROL);
		MAP_KEY2(XK_A, XK_a,    KEY_A);
		MAP_KEY2(XK_S, XK_s,    KEY_S);
		MAP_KEY2(XK_D, XK_d,    KEY_D);
		MAP_KEY2(XK_F, XK_f,    KEY_F);
		MAP_KEY2(XK_G, XK_g,    KEY_G);
		MAP_KEY2(XK_H, XK_h,    KEY_H);
		MAP_KEY2(XK_J, XK_j,    KEY_J);
		MAP_KEY2(XK_K, XK_k,    KEY_K);
		MAP_KEY2(XK_L, XK_l,    KEY_L);
		MAP_KEY (XK_semicolon,  KEY_SEMICOLON);
		MAP_KEY (XK_apostrophe, KEY_APOSTROPHE);
		MAP_KEY (XK_grave,      KEY_GRAVE); /// XXX: check this
		MAP_KEY (XK_Shift_L,    KEY_LSHIFT);
		MAP_KEY (XK_backslash,  KEY_BACKSLASH);
		MAP_KEY2(XK_Z, XK_z,    KEY_Z);
		MAP_KEY2(XK_X, XK_x,    KEY_X);
		MAP_KEY2(XK_C, XK_c,    KEY_C);
		MAP_KEY2(XK_V, XK_v,    KEY_V);
		MAP_KEY2(XK_B, XK_b,    KEY_B);
		MAP_KEY2(XK_N, XK_n,    KEY_N);
		MAP_KEY2(XK_M, XK_m,    KEY_M);
		MAP_KEY (XK_comma,      KEY_COMMA);
		MAP_KEY (XK_period,     KEY_PERIOD);
		MAP_KEY (XK_slash,      KEY_SLASH);
		MAP_KEY (XK_Shift_R,    KEY_RSHIFT);
		MAP_KEY (XK_multiply,   KEY_MULTIPLY);
		MAP_KEY (XK_Alt_L,      KEY_LALT);
		MAP_KEY (XK_space,      KEY_SPACE);
		MAP_KEY (XK_Caps_Lock,  KEY_CAPS_LOCK);
		MAP_KEY (XK_F1,         KEY_F1);
		MAP_KEY (XK_F2,         KEY_F2);
		MAP_KEY (XK_F3,         KEY_F3);
		MAP_KEY (XK_F4,         KEY_F4);
		MAP_KEY (XK_F5,         KEY_F5);
		MAP_KEY (XK_F6,         KEY_F6);
		MAP_KEY (XK_F7,         KEY_F7);
		MAP_KEY (XK_F8,         KEY_F8);
		MAP_KEY (XK_F9,         KEY_F9);
		MAP_KEY (XK_F10,        KEY_F10);
		MAP_KEY (XK_Num_Lock,   KEY_NUM_LOCK);
		MAP_KEY (XK_Scroll_Lock,KEY_SCROLL_LOCK);
		MAP_KEY (XK_Home,       KEY_HOME);
		MAP_KEY (XK_Up,         KEY_UP);
		MAP_KEY (XK_Page_Up,    KEY_PAGE_UP);
		/// XXX: check this
		//MAP_KEY (XK_minus,      KEY_NUM_MINUS);
		MAP_KEY (XK_Left,       KEY_LEFT);
		/// XXX: check this
		//MAP_KEY (XK_5,          KEY_NUM_5);
		MAP_KEY (XK_Right,      KEY_RIGHT);
		/// XXX: check this
		//MAP_KEY (XK_plus,       KEY_NUM_PLUS);
		MAP_KEY (XK_End,        KEY_END);
		MAP_KEY (XK_Down,       KEY_DOWN);
		MAP_KEY (XK_Page_Down,  KEY_PAGE_DOWN);
		MAP_KEY (XK_Insert,     KEY_INSERT);
		MAP_KEY (XK_Delete,     KEY_DELETE);
		//MAP_KEY (XK_84,         KEY_84);
		//MAP_KEY (XK_85,         KEY_85);
		//MAP_KEY (XK_86,         KEY_86);
		MAP_KEY (XK_F11,        KEY_F11);
		MAP_KEY (XK_F12,        KEY_F12);
		//MAP_KEY (XK_89,         KEY_89);
		//MAP_KEY (XK_90,         KEY_90);
		//MAP_KEY (XK_91,         KEY_91);
		//MAP_KEY (XK_F92,         KEY_F92);
		//MAP_KEY (XK_F93,         KEY_F93);
		/// XXX: these buttons were not found in X11 keys
#if 0
		MAP_KEY (0,             KEY_POWER);
		MAP_KEY (0,             KEY_SLEEP);

#endif
		//MAP_KEY (XK_96,         KEY_96);
		//MAP_KEY (XK_97,         KEY_97);
		//MAP_KEY (XK_98,         KEY_98);
#if 0
		MAP_KEY(0,              KEY_WAKE);
#endif
		//MAP_KEY (XK_COUNT,         KEY_COUNT);
		//MAP_KEY (XK_MUST_BE_INT,   KEY_MUST_BE_INT);
		default:
			return 0;
		break;
	}
}

#undef MAP_KEY2
#undef MAP_KEY
